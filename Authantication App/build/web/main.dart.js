// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const binding = flutter_sdk.src__widgets__binding;
  const app = flutter_sdk.src__material__app;
  const framework = flutter_sdk.src__widgets__framework;
  const scaffold = flutter_sdk.src__material__scaffold;
  const container = flutter_sdk.src__widgets__container;
  const colors = flutter_sdk.src__material__colors;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const basic = flutter_sdk.src__widgets__basic;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var login = Object.create(dart.library);
  var splash = Object.create(dart.library);
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    BuildContextToMySplash: () => (T.BuildContextToMySplash = dart.constFn(dart.fnType(splash.MySplash, [framework.BuildContext])))(),
    BuildContextToMyLogin: () => (T.BuildContextToMyLogin = dart.constFn(dart.fnType(login.MyLogin, [framework.BuildContext])))(),
    BuildContextToWidget: () => (T.BuildContextToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext])))(),
    IdentityMapOfString$BuildContextToWidget: () => (T.IdentityMapOfString$BuildContextToWidget = dart.constFn(_js_helper.IdentityMap$(core.String, T.BuildContextToWidget())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    }
  }, false);
  var C = [void 0];
  var I = [
    "package:flutter_app/login.dart",
    "package:flutter_app/splash.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.main = function main$0() {
    binding.runApp(new app.MaterialApp.new({debugShowCheckedModeBanner: false, initialRoute: "splash", routes: new (T.IdentityMapOfString$BuildContextToWidget()).from(["splash", dart.fn(context => new splash.MySplash.new(), T.BuildContextToMySplash()), "login", dart.fn(context => new login.MyLogin.new(), T.BuildContextToMyLogin())])}));
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  login.MyLogin = class MyLogin extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new login.MyLogin.new({key: key});
    }
    createState() {
      return new login._MyLoginState.new();
    }
  };
  (login.MyLogin.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    login.MyLogin.__proto__.new.call(this, {key: key});
    ;
  }).prototype = login.MyLogin.prototype;
  dart.addTypeTests(login.MyLogin);
  dart.addTypeCaches(login.MyLogin);
  dart.setMethodSignature(login.MyLogin, () => ({
    __proto__: dart.getMethods(login.MyLogin.__proto__),
    createState: dart.fnType(login._MyLoginState, [])
  }));
  dart.setLibraryUri(login.MyLogin, I[0]);
  login._MyLoginState = class _MyLoginState extends framework.State$(login.MyLogin) {
    build(context) {
      return new scaffold.Scaffold.new({body: new container.Container.new({width: 100, height: 100, color: colors.Colors.amber})});
    }
    static ['_#new#tearOff']() {
      return new login._MyLoginState.new();
    }
  };
  (login._MyLoginState.new = function() {
    login._MyLoginState.__proto__.new.call(this);
    ;
  }).prototype = login._MyLoginState.prototype;
  dart.addTypeTests(login._MyLoginState);
  dart.addTypeCaches(login._MyLoginState);
  dart.setMethodSignature(login._MyLoginState, () => ({
    __proto__: dart.getMethods(login._MyLoginState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(login._MyLoginState, I[0]);
  splash.MySplash = class MySplash extends framework.StatefulWidget {
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return new splash.MySplash.new({key: key});
    }
    createState() {
      return new splash._MySplashState.new();
    }
  };
  (splash.MySplash.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    splash.MySplash.__proto__.new.call(this, {key: key});
    ;
  }).prototype = splash.MySplash.prototype;
  dart.addTypeTests(splash.MySplash);
  dart.addTypeCaches(splash.MySplash);
  dart.setMethodSignature(splash.MySplash, () => ({
    __proto__: dart.getMethods(splash.MySplash.__proto__),
    createState: dart.fnType(splash._MySplashState, [])
  }));
  dart.setLibraryUri(splash.MySplash, I[1]);
  splash._MySplashState = class _MySplashState extends framework.State$(splash.MySplash) {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: new text.Text.new("Flutter Container"), backgroundColor: colors.Colors.black87}), body: new basic.Center.new({child: new container.Container.new({width: 100, height: 100, color: colors.Colors.black12})})});
    }
    static ['_#new#tearOff']() {
      return new splash._MySplashState.new();
    }
  };
  (splash._MySplashState.new = function() {
    splash._MySplashState.__proto__.new.call(this);
    ;
  }).prototype = splash._MySplashState.prototype;
  dart.addTypeTests(splash._MySplashState);
  dart.addTypeCaches(splash._MySplashState);
  dart.setMethodSignature(splash._MySplashState, () => ({
    __proto__: dart.getMethods(splash._MySplashState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(splash._MySplashState, I[1]);
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:flutter_app/login.dart": login,
    "package:flutter_app/splash.dart": splash
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/login.dart","/zapp/project/lib/splash.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CI,IA1BF,iCAAgB;AACd,UAAoB,6BAGD;AAF8B,QAA9B,AAAkB,6BAElB,eAF2B;;AAEL,QAAF,CAApB;;AAEnB,UAAO,AAAQ,uBAAY;AAKvB,QAJK,AAAqC,qBAA7B,qCAAuB,uBAAW,QAAC;AAG9C,UAFC,AAAQ,sBAAW,2BAA2B,CAC/C;;;wBAIL,SAAC,GAAG;AACL,UAAO,AAAQ,uBAAY;AAIvB,QAHC,AAAQ,sBAAW,wBAAwB,CAC5C,AAAE,CAAD,eACD,AAAW,UAAD;;2DAGM,yCACb,SAAC,MAAM,QAAQ,MAAM;AAC1B,cAAO,AAAQ,uBAAY;AAC4B,YAAlD,AAAQ,sBAAW,wBAAwB,CAAC,IAAI;;;EAI3D;;AAEiB;AAQd,MAPD,MAAS,gCACC;AACS,UAAf;6CAEe;AACmB,UAAjB;;IAGvB;;;AC3CI,IAPF,eAAO,qDACuB,qBACd,kBACN,yDACN,UAAU,QAAC,WAAY,wDACvB,SAAS,QAAC,WAAY;EAG5B;;ECNwB;;;;;;;ACDQ;IAAe;;;QAHxB;AAAQ,iDAAW,GAAG;;EAAC;;;;;;;;;UASlB;AACxB,YAAO,kCAIC,oCACG,aACC,YACM;IAIpB;;;;;;;;EACF;;;;;;;;;;;;;;ACnBkC;IAAgB;;;QAH3B;AAAQ,mDAAW,GAAG;;EAAC;;;;;;;;;UAQlB;AACxB,YAAO,oCACG,+BACC,kBAAK,uCACY,+BAEpB,6BACG,oCACE,aACC,YACM;IAKtB;;;;;;;;EACF","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    login: login,
    splash: splash
  };
}));

//# sourceMappingURL=main.js.map
